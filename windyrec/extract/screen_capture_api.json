{"extracted_information": "La API de Captura de Pantalla, específicamente el método `getDisplayMedia()` de `navigator.mediaDevices`, permite capturar parte o la totalidad de una pantalla para streaming, grabación o compartición durante una sesión de conferencia WebRTC. El usuario selecciona el área de la pantalla a compartir a través de una interfaz proporcionada por el agente de usuario.", "specifications": {"getDisplayMedia_options": {"video": {"displaySurface": "Tipo de superficie a capturar (ej. 'browser', 'window', 'monitor').", "preferCurrentTab": "Booleano, si se prefiere la pestaña actual.", "selfBrowserSurface": "Tipo, si se incluye o excluye la superficie del propio navegador ('exclude' para no mostrar la pestaña actual en las opciones).", "monitorTypeSurfaces": "Tipo, si se incluyen superficies de tipo monitor."}, "audio": {"suppressLocalAudioPlayback": "Booleano, si se suprime la reproducción de audio local.", "echoCancellation": "Booleano, si se activa la cancelación de eco.", "noiseSuppression": "Booleano, si se activa la supresión de ruido.", "sampleRate": "Número, tasa de muestreo del audio (ej. 44100 Hz).", "systemAudio": "Tipo, si se incluye o excluye el audio del sistema ('include', 'exclude')."}, "surfaceSwitching": "Tipo, si se permite el cambio dinámico de la pestaña compartida ('include')."}, "display_surfaces": {"definition": "Cualquier objeto de contenido seleccionable por la API para compartir.", "types": ["Contenido de una pestaña del navegador", "Ventana completa", "Monitor (o grupo de monitores)"], "visible_display_surface": "Superficie completamente visible en pantalla (ventana frontal, pestaña, pantalla completa).", "logical_display_surface": "Superficie parcial o completamente oscurecida. El navegador puede oscurecer, difuminar o reemplazar contenido oculto por seguridad. Un agente de usuario podría permitir la captura completa de una ventana oscurecida con permiso del usuario."}, "constraints_application": "Las restricciones (ej. 'width' para video) se aplican después de que el usuario selecciona el área a compartir, afectando el stream resultante (ej. escalado del video), no el tamaño de la fuente original."}, "pricing": {}, "features": [{"name": "Captura de Contenidos de Pantalla", "description": "Inicia la captura como un `MediaStream` en vivo, devolviendo una promesa que resuelve en un stream con los contenidos de la pantalla en vivo. Se invoca mediante `navigator.mediaDevices.getDisplayMedia()`."}, {"name": "Captura de Audio Compartido", "description": "Permite la captura de audio junto con el video del contenido de la pantalla. La fuente puede ser la ventana seleccionada, el sistema de audio completo del ordenador o el micrófono del usuario. La captura de audio es siempre opcional y puede no estar presente incluso si se solicita."}, {"name": "Configuración de Opciones y Restricciones", "description": "Permite especificar opciones para el stream resultante a través del objeto `displayMediaOptions`. Incluye configuración de superficies de visualización (`displaySurface`), audio (ej., `echoCancellation`, `noiseSuppression`, `sampleRate`), y comportamiento de selección (`selfBrowserSurface`, `systemAudio`, `surfaceSwitching`)."}, {"name": "Manejo de Seguridad y Privacidad", "description": "Los agentes de usuario deben preguntar al usuario para confirmar la solicitud de compartición y seleccionar el contenido. El sistema operativo mostrará un indicador visible cuando se esté compartiendo la pantalla. Contenido no visible en pantalla debería ser ofuscado por razones de seguridad, a menos que se autorice explícitamente."}, {"name": "Integración con HTML y JavaScript", "description": "El stream capturado se puede conectar a un elemento `<video>` en HTML para su visualización. Se proporcionan ejemplos de código para iniciar y detener la captura, y para obtener información sobre la configuración y las restricciones del track."}, {"name": "Políticas de Permisos", "description": "Requiere el permiso `display-capture` en Permissions Policy, ya sea mediante la cabecera HTTP `Permissions-Policy` o el atributo `allow` del `<iframe>`."}], "statistics": {}, "temporal_info": {}, "geographical_data": {}, "references": [{"name": "WebRTC API", "url": "/en-US/docs/Web/API/WebRTC_API"}, {"name": "MediaStream", "url": "/en-US/docs/Web/API/MediaStream"}, {"name": "MediaTrackConstraints", "url": "/en-US/docs/Web/API/MediaTrackConstraints"}, {"name": "MediaTrackSupportedConstraints", "url": "/en-US/docs/Web/API/MediaTrackSupportedConstraints"}, {"name": "MediaTrackSettings", "url": "/en-US/docs/Web/API/MediaTrackSettings"}, {"name": "MediaStream.getTracks()", "url": "/en-US/docs/Web/API/MediaStream/getTracks"}, {"name": "MediaStreamTrack.stop()", "url": "/en-US/docs/Web/API/MediaStreamTrack/stop"}, {"name": "MediaStream.getVideoTracks()", "url": "/en-US/docs/Web/API/MediaStream/getVideoTracks"}, {"name": "MediaStreamTrack.getSettings()", "url": "/en-US/docs/Web/API/MediaStreamTrack/getSettings"}, {"name": "MediaStreamTrack.getConstraints()", "url": "/en-US/docs/Web/API/MediaStreamTrack/getConstraints"}, {"name": "Permissions Policy (display-capture)", "url": "/en-US/docs/Web/HTTP/Guides/Permissions_Policy"}, {"name": "Screen Capture API (MDN)", "url": "/en-US/docs/Web/API/Screen_Capture_API"}, {"name": "Media Capture and Streams API", "url": "/en-US/docs/Web/API/Media_Capture_and_Streams_API"}, {"name": "HTMLCanvasElement.captureStream()", "url": "/en-US/docs/Web/API/HTMLCanvasElement/captureStream"}], "code_examples": [{"name": "Objeto displayMediaOptions", "description": "Configuración de opciones para getDisplayMedia(), incluyendo video y audio.", "code": "const displayMediaOptions = {\n  video: {\n    displaySurface: \"browser\",\n  },\n  audio: {\n    suppressLocalAudioPlayback: false,\n  },\n  preferCurrentTab: false,\n  selfBrowserSurface: \"exclude\",\n  systemAudio: \"include\",\n  surfaceSwitching: \"include\",\n  monitorTypeSurfaces: \"include\",\n};"}, {"name": "Captura con async/await", "description": "Función asíncrona para iniciar la captura de pantalla.", "code": "async function startCapture(displayMediaOptions) {\n  let captureStream = null;\n  try {\n    captureStream =\n      await navigator.mediaDevices.getDisplayMedia(displayMediaOptions);\n  } catch (err) {\n    console.error(`Error: ${err}`);\n  }\n  return captureStream;\n}"}, {"name": "Captura con Promise", "description": "Función para iniciar la captura de pantalla usando el patrón de Promise.", "code": "function startCapture(displayMediaOptions) {\n  return navigator.mediaDevices\n    .getDisplayMedia(displayMediaOptions)\n    .catch((err) => {\n      console.error(err);\n      return null;\n    });\n}"}, {"name": "Solicitud de Audio Básico", "description": "Opciones para solicitar la captura de video y audio.", "code": "const displayMediaOptions = {\n  video: true,\n  audio: true,\n};"}, {"name": "Solicitud de Audio Avanzado con Restricciones", "description": "Opciones detalladas para la captura de video (ventana) y audio (cancelación de eco, supresión de ruido, sample rate, etc.).", "code": "const displayMediaOptions = {\n  video: {\n    displaySurface: \"window\",\n  },\n  audio: {\n    echoCancellation: true,\n    noiseSuppression: true,\n    sampleRate: 44100,\n    suppressLocalAudioPlayback: true,\n  },\n  surfaceSwitching: \"include\",\n  selfBrowserSurface: \"exclude\",\n  systemAudio: \"exclude\",\n};"}, {"name": "Configuración de Elementos HTML y Event Listeners", "description": "JavaScript para seleccionar elementos HTML y configurar eventos de clic para iniciar/detener la captura.", "code": "const videoElem = document.getElementById(\"video\");\nconst logElem = document.getElementById(\"log\");\nconst startElem = document.getElementById(\"start\");\nconst stopElem = document.getElementById(\"stop\");\n\n// Options for getDisplayMedia()\nconst displayMediaOptions = {\n  video: {\n    displaySurface: \"window\",\n  },\n  audio: false,\n};\n\n// Set event listeners for the start and stop buttons\nstartElem.addEventListener(\n  \"click\",\n  (evt) => {\n    startCapture();\n  },\n  false,\n);\nstopElem.addEventListener(\n  \"click\",\n  (evt) => {\n    stopCapture();\n  },\n  false,\n);"}, {"name": "Función startCapture() para Streaming", "description": "Inicia la captura, asigna el stream a un elemento video y vuelca información de configuración.", "code": "async function startCapture() {\n  logElem.textContent = \"\";\n\n  try {\n    videoElem.srcObject =\n      await navigator.mediaDevices.getDisplayMedia(displayMediaOptions);\n    dumpOptionsInfo();\n  } catch (err) {\n    console.error(err);\n  }\n}"}, {"name": "Función stopCapture()", "description": "Detiene todos los tracks del stream capturado y libera el srcObject del elemento video.", "code": "function stopCapture(evt) {\n  let tracks = videoElem.srcObject.getTracks();\n\n  tracks.forEach((track) => track.stop());\n  videoElem.srcObject = null;\n}"}, {"name": "Función dumpOptionsInfo()", "description": "Muestra la configuración y las restricciones actuales del track de video.", "code": "function dumpOptionsInfo() {\n  const videoTrack = videoElem.srcObject.getVideoTracks()[0];\n\n  console.log(\"Track settings:\");\n  console.log(JSON.stringify(videoTrack.getSettings(), null, 2));\n  console.log(\"Track constraints:\");\n  console.log(JSON.stringify(videoTrack.getConstraints(), null, 2));\n}"}, {"name": "HTML de Ejemplo", "description": "Estructura HTML con botones, elemento de video y área de log.", "code": "<p>\n  This example shows you the contents of the selected part of your display.\n  Click the Start Capture button to begin.\n</p>\n<p>\n  <button id=\"start\">Start Capture </button>\n  <button id=\"stop\">Stop Capture</button>\n</p>\n<video id=\"video\" autoplay=\"true\"></video>\n<h3>Log:</h3>\n<pre id=\"log\"></pre>"}, {"name": "CSS de Ejemplo", "description": "Estilos CSS para el elemento video y el área de log.", "code": "#video {\n  border: 1px solid #999999;\n  width: 98%;\n  max-width: 860px;\n}\n\n#log {\n  width: 25rem;\n  height: 15rem;\n  border: 1px solid black;\n  padding: 0.5rem;\n  overflow: scroll;\n}"}, {"name": "Permissions-Policy HTTP Header", "description": "Cabecera HTTP para permitir la captura de pantalla para el propio origen.", "code": "Permissions-Policy: display-capture=(self)"}, {"name": "Permissions-Policy en iframe", "description": "Atributo 'allow' para un iframe para conceder permiso de captura de pantalla.", "code": "<iframe src=\"example.com\" allow=\"display-capture\"></iframe>"}], "limitations": ["Disponibilidad limitada: La función no es 'Baseline' ya que no funciona en algunos de los navegadores más utilizados.", "Restricciones de seguridad/privacidad: El contenido que no es visible en pantalla (en superficies lógicas) puede ser ofuscado, difuminado o reemplazado por el navegador por razones de seguridad. Esto evita compartir accidentalmente información sensible. El contenido de las fuentes de captura de pantalla no es enumerable a través de `enumerateDevices()` ni activan el evento `devicechange`.", "Las restricciones de MediaStream (ej. ancho/alto) solo se aplican *después* de que el usuario selecciona el área a compartir y afectan al stream resultante (ej. escalado), no a la fuente original. Las restricciones *nunca* modifican la lista de fuentes disponibles para la captura.", "La captura de audio, aunque solicitada, puede no estar presente en el `MediaStream` retornado si el agente de usuario no lo soporta o el usuario no lo permite."], "browser_compatibility": {"status": "Limited availability", "details": "No es una característica 'Baseline' debido a la falta de soporte en algunos de los navegadores más utilizados. Las versiones recientes del shim `WebRTC adapter.js` incluyen implementaciones de `getDisplayMedia()` para permitir compartir pantalla en navegadores que lo soportan pero no implementan la API estándar actual, funcionando con al menos Chrome, Edge y Firefox.", "check_for_audio_support": "Se recomienda verificar la compatibilidad específica de `getDisplayMedia()` para el soporte de audio en streams de pantalla capturados en la sección de compatibilidad de navegadores de MDN (enlace: `/en-US/docs/Web/API/MediaDevices/getDisplayMedia#browser_compatibility`)."}}