{"extracted_information": "El contenido web proporciona un ejemplo práctico y detallado de cómo realizar una grabación de pantalla usando JavaScript vanilla, específicamente las APIs `Media Capture and Streams` y `MediaRecorder`. Se desglosa el proceso en tres pasos clave, con fragmentos de código y explicaciones para cada uno. Aunque el ejemplo completo incluye más de 10 líneas debido a la gestión de botones, la lógica de grabación central se mantiene concisa.", "specifications": {"APIs_utilizadas": ["Media Capture and Streams API (navigator.mediaDevices.getDisplayMedia)", "MediaRecorder API"]}, "features": [{"name": "Crear un flujo de video", "description": "Utiliza `navigator.mediaDevices.getDisplayMedia()` para obtener un flujo de video de la pantalla del usuario. Abre un diálogo para que el usuario elija qué grabar (pantalla completa, aplicación específica o pestaña del navegador). Requiere consentimiento activo del usuario. Retorna una promesa.", "code_example": "javascript\nconst stream = await navigator.mediaDevices.getDisplayMedia({\n  video: { mediaSource: \"screen\" }\n});\n"}, {"name": "Grabar el flujo", "description": "Instancia `MediaRecorder` con el flujo obtenido. Los datos de video se capturan en 'chunks' y se almacenan en un array a medida que están disponibles (`ondataavailable`). La grabación se inicia con `recorder.start()`.", "code_example": "javascript\nconst recorder = new MediaRecorder(stream);\nconst chunks = [];\nrecorder.ondataavailable = e => chunks.push(e.data);\nrecorder.start();\n"}, {"name": "Convertir la grabación a un Blob", "description": "Se activa cuando la grabación se detiene (`recorder.onstop`). Combina todos los 'chunks' grabados en un `Blob` completo. Este Blob puede ser reproducido en una etiqueta `<video>` usando `URL.createObjectURL()` o enviado a un servidor/descargado.", "code_example": "javascript\nrecorder.onstop = e => {\n  const completeBlob = new Blob(chunks, { type: chunks[0].type });\n  video.src = URL.createObjectURL(completeBlob);\n};\n"}, {"name": "Opción de descarga", "description": "Muestra cómo permitir al usuario descargar la grabación como un archivo (e.g., .webm) creando un enlace de descarga y simulando un clic.", "code_example": "javascript\nrecorder.onstop = e => {\n  const completeBlob = new Blob(chunks, { type: chunks[0].type });\n  const downloadLink = document.createElement(\"a\");\n  downloadLink.href = URL.createObjectURL(completeBlob);\n  downloadLink.download = \"screen-recording.webm\";\n  document.body.appendChild(downloadLink);\n  downloadLink.click();\n  document.body.removeChild(downloadLink);\n};\n"}, {"name": "Parar la grabación con temporizador", "description": "Ejemplo de cómo detener la grabación automáticamente después de un tiempo definido.", "code_example": "javascript\nsetTimeout(() => recorder.stop(), 3000);\n"}, {"name": "Grabar audio de micrófono", "description": "Se puede grabar audio del micrófono reemplazando `getDisplayMedia` con `getUserMedia({video: true})` para video y `getUserMedia({audio: true})` para audio. Luego, el flujo se puede pasar a `MediaRecorder`.", "code_example": "javascript\nconst stream = await navigator.mediaDevices.getUserMedia({\n  audio: true\n});\n"}, {"name": "Streaming en tiempo real", "description": "En lugar de almacenar todos los 'chunks', se pueden enviar al servidor o a otros pares en el manejador `ondataavailable`. Se recomienda usar `recorder.start(timeslice)` para recibir datos periódicamente.", "code_example_concept": "recorder.start(100);"}], "references": ["Media Capture and Streams API: https://developer.mozilla.org/en-US/docs/Web/API/Media_Streams_API", "WebRTC API: https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API", "HTML video tag: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video", "MediaRecorder API: https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder", "Blob API: https://developer.mozilla.org/en-US/docs/Web/API/Blob"]}